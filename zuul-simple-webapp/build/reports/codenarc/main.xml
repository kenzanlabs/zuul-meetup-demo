<?xml version='1.0'?>
<CodeNarc url='http://www.codenarc.org' version='0.25.2'><Report timestamp='Oct 25, 2017 10:38:53 AM'/><Project title=''><SourceDirectory>src/main/groovy</SourceDirectory></Project><PackageSummary totalFiles='3' filesWithViolations='2' priority1='0' priority2='24' priority3='0'></PackageSummary><Package path='filters' totalFiles='3' filesWithViolations='2' priority1='0' priority2='24' priority3='0'></Package><Package path='filters/post' totalFiles='1' filesWithViolations='1' priority1='0' priority2='8' priority3='0'><File name='SendResponseFilter.groovy'><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='82'><SourceLine><![CDATA[writeResponse(new ByteArrayInputStream(body.getBytes(Charset.forName("UTF-8"))), outStream)]]></SourceLine><Message><![CDATA[Duplicate String Literal: UTF-8]]></Message></Violation><Violation ruleName='IfStatementBraces' priority='2' lineNumber='88'><SourceLine><![CDATA[if (requestEncoding != null &amp;&amp; requestEncoding.equals("gzip"))]]></SourceLine><Message><![CDATA[The if statement lacks braces]]></Message></Violation><Violation ruleName='ExplicitCallToEqualsMethod' priority='2' lineNumber='88'><SourceLine><![CDATA[if (requestEncoding != null &amp;&amp; requestEncoding.equals("gzip"))]]></SourceLine><Message><![CDATA[Violation in class filters.post.SendResponseFilter. Explicit call to requestEncoding.equals(gzip) method can be rewritten as (requestEncoding == (gzip))]]></Message></Violation><Violation ruleName='IfStatementBraces' priority='2' lineNumber='95'><SourceLine><![CDATA[if (context.getResponseGZipped() &amp;&amp; !isGzipRequested)]]></SourceLine><Message><![CDATA[The if statement lacks braces]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='103'><SourceLine><![CDATA[servletResponse.setHeader(ZuulHeaders.CONTENT_ENCODING, "gzip")]]></SourceLine><Message><![CDATA[Duplicate String Literal: gzip]]></Message></Violation><Violation ruleName='EmptyCatchBlock' priority='2' lineNumber='114'><SourceLine><![CDATA[} catch (IOException e) {]]></SourceLine><Message><![CDATA[The catch block is empty]]></Message></Violation><Violation ruleName='IfStatementBraces' priority='2' lineNumber='151'><SourceLine><![CDATA[if (INCLUDE_DEBUG_HEADER.get()) servletResponse.addHeader("X-Zuul-Debug-Header", debugHeader)]]></SourceLine><Message><![CDATA[The if statement lacks braces]]></Message></Violation><Violation ruleName='IfStatementBraces' priority='2' lineNumber='169'><SourceLine><![CDATA[if (contentLength != null &amp;&amp; !ctx.getResponseGZipped())]]></SourceLine><Message><![CDATA[The if statement lacks braces]]></Message></Violation></File></Package><Package path='filters/pre' totalFiles='1' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='filters/route' totalFiles='1' filesWithViolations='1' priority1='0' priority2='16' priority3='0'><File name='SimpleHostRoutingFilter.groovy'><Violation ruleName='IfStatementBraces' priority='2' lineNumber='84'><SourceLine><![CDATA[if (hc == null) return;]]></SourceLine><Message><![CDATA[The if statement lacks braces]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='107'><SourceLine><![CDATA[cm.setDefaultMaxPerRoute(Integer.parseInt(System.getProperty("zuul.max.host.connections", "20")));]]></SourceLine><Message><![CDATA[Duplicate String Literal: zuul.max.host.connections]]></Message></Violation><Violation ruleName='EmptyFinallyBlock' priority='2' lineNumber='242'><SourceLine><![CDATA[} finally {]]></SourceLine><Message><![CDATA[The finally block is empty]]></Message></Violation><Violation ruleName='ExplicitCallToEqualsMethod' priority='2' lineNumber='255'><SourceLine><![CDATA[if (currentQueryString == null || currentQueryString.equals("")) {]]></SourceLine><Message><![CDATA[Violation in class filters.route.SimpleHostRoutingFilter. Explicit call to currentQueryString.equals() method can be rewritten as (currentQueryString == ())]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='262'><SourceLine><![CDATA[rebuiltQueryString = rebuiltQueryString + "&amp;"]]></SourceLine><Message><![CDATA[Duplicate String Literal: &amp;]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='266'><SourceLine><![CDATA[def (name,value) = keyPair.split("=", 2)]]></SourceLine><Message><![CDATA[Duplicate String Literal: =]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='269'><SourceLine><![CDATA[value = value.replaceAll('&amp;', '%26')]]></SourceLine><Message><![CDATA[Duplicate String Literal: &amp;]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='270'><SourceLine><![CDATA[rebuiltQueryString = rebuiltQueryString + name + "=" + value]]></SourceLine><Message><![CDATA[Duplicate String Literal: =]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='277'><SourceLine><![CDATA[return "?" + rebuiltQueryString]]></SourceLine><Message><![CDATA[Duplicate String Literal: ?]]></Message></Violation><Violation ruleName='ExplicitCallToEqualsMethod' priority='2' lineNumber='304'><SourceLine><![CDATA[if (name.toLowerCase().equals("host")) {]]></SourceLine><Message><![CDATA[Violation in class filters.route.SimpleHostRoutingFilter. Explicit call to name.toLowerCase().equals(host) method can be rewritten as (name.toLowerCase() == (host))]]></Message></Violation><Violation ruleName='ExplicitArrayListInstantiation' priority='2' lineNumber='318'><SourceLine><![CDATA[ArrayList&lt;BasicHeader&gt; headers = new ArrayList()]]></SourceLine><Message><![CDATA[ArrayList objects are better instantiated using the form "[]"]]></Message></Violation><Violation ruleName='IfStatementBraces' priority='2' lineNumber='323'><SourceLine><![CDATA[if (isValidHeader(name)) headers.add(new BasicHeader(name, value))]]></SourceLine><Message><![CDATA[The if statement lacks braces]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='338'><SourceLine><![CDATA[headers.add(new BasicHeader("accept-encoding", "deflate, gzip"))]]></SourceLine><Message><![CDATA[Duplicate String Literal: accept-encoding]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='371'><SourceLine><![CDATA[return "GET"]]></SourceLine><Message><![CDATA[Duplicate String Literal: GET]]></Message></Violation><Violation ruleName='IfStatementBraces' priority='2' lineNumber='409'><SourceLine><![CDATA[if (header.name.equalsIgnoreCase("content-length"))]]></SourceLine><Message><![CDATA[The if statement lacks braces]]></Message></Violation><Violation ruleName='DuplicateStringLiteral' priority='2' lineNumber='409'><SourceLine><![CDATA[if (header.name.equalsIgnoreCase("content-length"))]]></SourceLine><Message><![CDATA[Duplicate String Literal: content-length]]></Message></Violation></File></Package><Rules><Rule name='AssertWithinFinallyBlock'><Description><![CDATA[Checks for assert statements within a finally block. An assert can throw an exception, hiding the original exception, if there is one.]]></Description></Rule><Rule name='AssignCollectionSort'><Description><![CDATA[The Collections.sort() method mutates the list and returns the list as a value. If you are assigning the result of sort() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs.]]></Description></Rule><Rule name='AssignCollectionUnique'><Description><![CDATA[The Collections.unique() method mutates the list and returns the list as a value. If you are assigning the result of unique() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs.]]></Description></Rule><Rule name='AssignmentInConditional'><Description><![CDATA[An assignment operator (=) was used in a conditional test. This is usually a typo, and the comparison operator (==) was intended.]]></Description></Rule><Rule name='BigDecimalInstantiation'><Description><![CDATA[Checks for calls to the BigDecimal constructors that take a double parameter, which may result in an unexpected BigDecimal value.]]></Description></Rule><Rule name='BitwiseOperatorInConditional'><Description><![CDATA[Checks for bitwise operations in conditionals, if you need to do a bitwise operation then it is best practive to extract a temp variable.]]></Description></Rule><Rule name='BooleanGetBoolean'><Description><![CDATA[This rule catches usages of java.lang.Boolean.getBoolean(String) which reads a boolean from the System properties. It is often mistakenly used to attempt to read user input or parse a String into a boolean. It is a poor piece of API to use; replace it with System.properties['prop'].]]></Description></Rule><Rule name='BrokenNullCheck'><Description><![CDATA[Looks for faulty checks for null that can cause a NullPointerException.]]></Description></Rule><Rule name='BrokenOddnessCheck'><Description><![CDATA[The code uses x % 2 == 1 to check to see if a value is odd, but this won't work for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check for oddness, consider using x &amp; 1 == 1, or x % 2 != 0.]]></Description></Rule><Rule name='ClassForName'><Description><![CDATA[Using Class.forName(...) is a common way to add dynamic behavior to a system. However, using this method can cause resource leaks because the classes can be pinned in memory for long periods of time.]]></Description></Rule><Rule name='ClosureAsLastMethodParameter'><Description><![CDATA[If a method is called and the last parameter is an inline closure then it can be declared outside of the method call brackets.]]></Description></Rule><Rule name='CollectAllIsDeprecated'><Description><![CDATA[collectAll{} is deprecated since Groovy 1.8.1. Use collectNested instead{}.]]></Description></Rule><Rule name='ComparisonOfTwoConstants'><Description><![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare two constants to each other or two literals that contain only constant values, e.g.: 23 == 67, Boolean.FALSE != false, 0.17 &lt;= 0.99, "abc" &gt; "ddd", [a:1] &lt;=&gt; [a:2], [1,2].equals([3,4]) or [a:false, b:true].compareTo(['a':34.5, b:Boolean.TRUE], where x is a variable.]]></Description></Rule><Rule name='ComparisonWithSelf'><Description><![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare a variable to itself, e.g.: x == x, x != x, x &lt;=&gt; x, x &lt; x, x &gt;= x, x.equals(x) or x.compareTo(x), where x is a variable.]]></Description></Rule><Rule name='ConfusingMultipleReturns'><Description><![CDATA[Multiple return values can be used to set several variables at once. To use multiple return values, the left hand side of the assignment must be enclosed in parenthesis. If not, then you are not using multiple return values, you're only assigning the last element.]]></Description></Rule><Rule name='ConstantAssertExpression'><Description><![CDATA[Checks for assert statements where the assert boolean condition expression is a constant or literal value.]]></Description></Rule><Rule name='ConstantIfExpression'><Description><![CDATA[Checks for if statements with a constant value for the if expression, such as true, false, null, or a literal constant value.]]></Description></Rule><Rule name='ConstantTernaryExpression'><Description><![CDATA[Checks for ternary expressions with a constant value for the boolean expression, such as true, false, null, or a literal constant value.]]></Description></Rule><Rule name='DeadCode'><Description><![CDATA[Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted.]]></Description></Rule><Rule name='DoubleNegative'><Description><![CDATA[There is no point in using a double negative, it is always positive. For instance !!x can always be simplified to x. And !(!x) can as well.]]></Description></Rule><Rule name='DuplicateCaseStatement'><Description><![CDATA[Check for duplicate case statements in a switch block, such as two equal integers or strings.]]></Description></Rule><Rule name='DuplicateListLiteral'><Description><![CDATA[Code containing duplicate List literals can usually be improved by declaring the List as a constant field.]]></Description></Rule><Rule name='DuplicateMapKey'><Description><![CDATA[A map literal is created with duplicated key. The map entry will be overwritten.]]></Description></Rule><Rule name='DuplicateMapLiteral'><Description><![CDATA[Code containing duplicate Map literals can usually be improved by declaring the Map as a constant field.]]></Description></Rule><Rule name='DuplicateSetValue'><Description><![CDATA[A Set literal is created with duplicate constant value. A set cannot contain two elements with the same value.]]></Description></Rule><Rule name='DuplicateStringLiteral'><Description><![CDATA[Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The ignoreStrings property () can optionally specify a comma-separated list of Strings to ignore.]]></Description></Rule><Rule name='ElseBlockBraces'><Description><![CDATA[Use braces for else blocks, even for a single statement. By default, braces are not required for an else if it is followed immediately by an if. Set the bracesRequiredForElseIf property to true to require braces is that situation as well.]]></Description></Rule><Rule name='EmptyCatchBlock'><Description><![CDATA[In most cases, exceptions should not be caught and ignored (swallowed).]]></Description></Rule><Rule name='EmptyClass'><Description><![CDATA[Reports classes without methods, fields or properties. Why would you need a class like this?]]></Description></Rule><Rule name='EmptyElseBlock'><Description><![CDATA[Empty else blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyFinallyBlock'><Description><![CDATA[Empty finally blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyForStatement'><Description><![CDATA[Empty for statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyIfStatement'><Description><![CDATA[Empty if statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyInstanceInitializer'><Description><![CDATA[An empty class instance initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptyMethod'><Description><![CDATA[A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation.]]></Description></Rule><Rule name='EmptyStaticInitializer'><Description><![CDATA[An empty static initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptySwitchStatement'><Description><![CDATA[Empty switch statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptySynchronizedStatement'><Description><![CDATA[Empty synchronized statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyTryBlock'><Description><![CDATA[Empty try blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyWhileStatement'><Description><![CDATA[Empty while statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EqualsAndHashCode'><Description><![CDATA[If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.]]></Description></Rule><Rule name='EqualsOverloaded'><Description><![CDATA[The class has an equals method, but the parameter of the method is not of type Object. It is not overriding equals but instead overloading it.]]></Description></Rule><Rule name='ExplicitArrayListInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a ArrayList using the no-arg constructor. In Groovy, it is best to write "new ArrayList()" as "[]", which creates the same object.]]></Description></Rule><Rule name='ExplicitCallToAndMethod'><Description><![CDATA[This rule detects when the and(Object) method is called directly in code instead of using the &amp; operator. A groovier way to express this: a.and(b) is this: a &amp; b]]></Description></Rule><Rule name='ExplicitCallToCompareToMethod'><Description><![CDATA[This rule detects when the compareTo(Object) method is called directly in code instead of using the &lt;=&gt;, &gt;, &gt;=, &lt;, and &lt;= operators. A groovier way to express this: a.compareTo(b) is this: a &lt;=&gt; b, or using the other operators.]]></Description></Rule><Rule name='ExplicitCallToDivMethod'><Description><![CDATA[This rule detects when the div(Object) method is called directly in code instead of using the / operator. A groovier way to express this: a.div(b) is this: a / b]]></Description></Rule><Rule name='ExplicitCallToEqualsMethod'><Description><![CDATA[This rule detects when the equals(Object) method is called directly in code instead of using the == or != operator. A groovier way to express this: a.equals(b) is this: a == b and a groovier way to express : !a.equals(b) is : a != b]]></Description></Rule><Rule name='ExplicitCallToGetAtMethod'><Description><![CDATA[This rule detects when the getAt(Object) method is called directly in code instead of using the [] index operator. A groovier way to express this: a.getAt(b) is this: a[b]]]></Description></Rule><Rule name='ExplicitCallToLeftShiftMethod'><Description><![CDATA[This rule detects when the leftShift(Object) method is called directly in code instead of using the &lt;&lt; operator. A groovier way to express this: a.leftShift(b) is this: a &lt;&lt; b]]></Description></Rule><Rule name='ExplicitCallToMinusMethod'><Description><![CDATA[This rule detects when the minus(Object) method is called directly in code instead of using the - operator. A groovier way to express this: a.minus(b) is this: a - b]]></Description></Rule><Rule name='ExplicitCallToModMethod'><Description><![CDATA[This rule detects when the mod(Object) method is called directly in code instead of using the % operator. A groovier way to express this: a.mod(b) is this: a % b]]></Description></Rule><Rule name='ExplicitCallToMultiplyMethod'><Description><![CDATA[This rule detects when the minus(Object) method is called directly in code instead of using the * operator. A groovier way to express this: a.multiply(b) is this: a * b]]></Description></Rule><Rule name='ExplicitCallToOrMethod'><Description><![CDATA[This rule detects when the or(Object) method is called directly in code instead of using the | operator. A groovier way to express this: a.or(b) is this: a | b]]></Description></Rule><Rule name='ExplicitCallToPlusMethod'><Description><![CDATA[This rule detects when the plus(Object) method is called directly in code instead of using the + operator. A groovier way to express this: a.plus(b) is this: a + b]]></Description></Rule><Rule name='ExplicitCallToPowerMethod'><Description><![CDATA[This rule detects when the power(Object) method is called directly in code instead of using the ** operator. A groovier way to express this: a.power(b) is this: a ** b]]></Description></Rule><Rule name='ExplicitCallToRightShiftMethod'><Description><![CDATA[This rule detects when the rightShift(Object) method is called directly in code instead of using the &gt;&gt; operator. A groovier way to express this: a.rightShift(b) is this: a &gt;&gt; b]]></Description></Rule><Rule name='ExplicitCallToXorMethod'><Description><![CDATA[This rule detects when the xor(Object) method is called directly in code instead of using the ^ operator. A groovier way to express this: a.xor(b) is this: a ^ b]]></Description></Rule><Rule name='ExplicitGarbageCollection'><Description><![CDATA[Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.]]></Description></Rule><Rule name='ExplicitHashMapInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a HashMap using the no-arg constructor. In Groovy, it is best to write "new HashMap()" as "[:]", which creates the same object.]]></Description></Rule><Rule name='ExplicitHashSetInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a HashSet using the no-arg constructor. In Groovy, it is best to write "new HashSet()" as "[] as Set", which creates the same object.]]></Description></Rule><Rule name='ExplicitLinkedHashMapInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a LinkedHashMap using the no-arg constructor. In Groovy, it is best to write "new LinkedHashMap()" as "[:]", which creates the same object.]]></Description></Rule><Rule name='ExplicitLinkedListInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a LinkedList using the no-arg constructor. In Groovy, it is best to write "new LinkedList()" as "[] as Queue", which creates the same object.]]></Description></Rule><Rule name='ExplicitStackInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a Stack using the no-arg constructor. In Groovy, it is best to write "new Stack()" as "[] as Stack", which creates the same object.]]></Description></Rule><Rule name='ExplicitTreeSetInstantiation'><Description><![CDATA[This rule checks for the explicit instantiation of a TreeSet using the no-arg constructor. In Groovy, it is best to write "new TreeSet()" as "[] as SortedSet", which creates the same object.]]></Description></Rule><Rule name='ForLoopShouldBeWhileLoop'><Description><![CDATA[A for loop without an init and update statement can be simplified to a while loop.]]></Description></Rule><Rule name='ForStatementBraces'><Description><![CDATA[Use braces for for statements, even for a single statement.]]></Description></Rule><Rule name='GStringAsMapKey'><Description><![CDATA[A GString should not be used as a map key since its hashcode is not guaranteed to be stable. Consider calling key.toString().]]></Description></Rule><Rule name='GStringExpressionWithinString'><Description><![CDATA[Check for regular (single quote) strings containing a GString-type expression (${...}).]]></Description></Rule><Rule name='GetterMethodCouldBeProperty'><Description><![CDATA[If a class defines a public method that follows the Java getter notation, and returns a constant, then it is cleaner to provide a Groovy property for the value rather than a Groovy method.]]></Description></Rule><Rule name='GroovyLangImmutable'><Description><![CDATA[The groovy.lang.Immutable annotation has been deprecated and replaced by groovy.transform.Immutable. Do not use the Immutable in groovy.lang.]]></Description></Rule><Rule name='HardCodedWindowsFileSeparator'><Description><![CDATA[This rule finds usages of a Windows file separator within the constructor call of a File object. It is better to use the Unix file separator or use the File.separator constant.]]></Description></Rule><Rule name='HardCodedWindowsRootDirectory'><Description><![CDATA[This rule find cases where a File object is constructed with a windows-based path. This is not portable, and using the File.listRoots() method is a better alternative.]]></Description></Rule><Rule name='IfStatementBraces'><Description><![CDATA[Use braces for if statements, even for a single statement.]]></Description></Rule><Rule name='IntegerGetInteger'><Description><![CDATA[This rule catches usages of java.lang.Integer.getInteger(String, ...) which reads an Integer from the System properties. It is often mistakenly used to attempt to read user input or parse a String into an Integer. It is a poor piece of API to use; replace it with System.properties['prop'].]]></Description></Rule><Rule name='MultipleUnaryOperators'><Description><![CDATA[Checks for multiple consecutive unary operators. These are confusing, and are likely typos and bugs.]]></Description></Rule><Rule name='RandomDoubleCoercedToZero'><Description><![CDATA[The Math.random() method returns a double result greater than or equal to 0.0 and less than 1.0. If you coerce this result into an Integer or int, then it is coerced to zero. Casting the result to int, or assigning it to an int field is probably a bug.]]></Description></Rule><Rule name='RemoveAllOnSelf'><Description><![CDATA[Don't use removeAll to clear a collection. If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling c.removeAll(c) to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a ConcurrentModificationException.]]></Description></Rule><Rule name='ReturnFromFinallyBlock'><Description><![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ThrowExceptionFromFinallyBlock'><Description><![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='UseCollectMany'><Description><![CDATA[In many case collectMany() yields the same result as collect{}.flatten(). It is easier to understand and more clearly conveys the intent.]]></Description></Rule><Rule name='UseCollectNested'><Description><![CDATA[Instead of nested collect{}-calls use collectNested{}]]></Description></Rule><Rule name='WhileStatementBraces'><Description><![CDATA[Use braces for while statements, even for a single statement.]]></Description></Rule></Rules></CodeNarc>